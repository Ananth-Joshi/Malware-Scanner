import tkinter as tk
from tkinter import ttk
import hashlib
import requests


BLOCK_SIZE = 65536 # The size of each read from the file


def createTable(window,filePath):
    file_hash = hashlib.sha256() # Create the hash object, can use something other than `.sha256()` if you wish
    with open(filePath, 'rb') as f: # Open the file to read it's bytes
        fb = f.read(BLOCK_SIZE) # Read from the file. Take in the amount declared above
        while len(fb) > 0: # While there is still data being read from the file
            file_hash.update(fb) # Update the hash
            fb = f.read(BLOCK_SIZE) # Read the next block from the file
    final=file_hash.hexdigest()# Get the hexadecimal digest of the hash
    print(final)
    headers={"accept":"application/json","x-apikey":"z"}
    response=requests.get(f'https://www.virustotal.com/api/v3/files/{final}',headers=headers)
    

    tree=ttk.Treeview(
        window,
        columns=("Provider","Category","Result"),
        show="headings",
    )
    tree.heading("Provider", text="Provider")
    tree.heading("Category", text="Category")
    tree.heading("Result", text="Result")
    
    # Define the column widths
    tree.column("Provider", width=150)
    tree.column("Category", width=150)
    tree.column("Result", width=150)

    results=response.json()['data']['attributes']['last_analysis_results']

    for key in results:
        tree.insert("", tk.END,tags=results[key]['category'], values=[key,results[key]['category'],results[key]['result']])
    
    tree.tag_configure("undetected", background="green")
    tree.tag_configure("malicious", background="red")
    
    # Pack the Treeview widget
    tree.pack(padx=20, pady=20)
    return response
