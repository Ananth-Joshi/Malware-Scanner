import customtkinter as ctk
import requests
import Table
import ai
import threading

class MalwareScannerApp:
    #constructor
    def __init__(self,window):
        self.window=window
        self.init_ui_components()
        self.setup_grid_layout()
        self.file_path='' #Initialize file_path as an empty string.
    

    #initialize ui components
    def init_ui_components(self):

        self.mainText = ctk.CTkLabel(master=self.window,text='Malware Scanner',text_color="#1c57b8",font=('', 50)) #Heading.
        self.themeButton = ctk.CTkButton(master=self.window,text='Change Theme',command=self.toggleTheme)   #Theme Toggle Button.
        self.fileFrame = ctk.CTkFrame(master=self.window,)  #Frame consisting of scan button and file path.
        self.fileFrameTitle = ctk.CTkLabel(master=self.fileFrame,text="SELECT A FILE",anchor='n',font=('', 20),pady=25) #Select file heading.
        self.fileNameLabel = ctk.CTkLabel(master=self.fileFrame,text="No File Selected",anchor='n',font=('', 20),pady=20)   #Selected file text.
        self.fileInputButton = ctk.CTkButton(master=self.fileFrame,text='Browse File',command=self.open_file_dialog)    #Choose File Button.
        self.malwareInfoLabel=ctk.CTkLabel(master=self.fileFrame,text='')   #Label consisting of Malware info like number of suspicious, undetected etc.
        self.tableFrame=ctk.CTkFrame(master=self.window)    #Frame consisting of scan result table.
        self.scanButton = ctk.CTkButton(master=self.fileFrame,text='SCAN',fg_color='green',state='disabled',hover_color='#41693b',command=self.handleScan) #Button to Start Scan.
        self.aiResponseFrame=ctk.CTkFrame(master=self.window) #Frame containing AI response.
        self.aiResponseTitle=ctk.CTkLabel(master=self.aiResponseFrame,text='AI Analysis(Powered By Gemini)') #AI frame title.
        self.aiResponseBox = ctk.CTkTextbox(master=self.aiResponseFrame,width=450,height=270,)  #Label containing AI Response.
        self.tableFrameTitle=ctk.CTkLabel(master=self.tableFrame,text='Scan Report') #Table Frame Title
        

        #Pack widgets
        self.fileFrameTitle.pack()
        self.fileNameLabel.pack()
        self.malwareInfoLabel.pack()
        self.fileInputButton.pack(pady=20)
        self.scanButton.pack()

    #configure and setup grid
    def setup_grid_layout(self):
        self.window.columnconfigure(0, weight=1)
        self.window.columnconfigure(1, weight=1)
        self.window.columnconfigure(2, weight=1)
        self.window.rowconfigure((0, 1, 2,3,4), weight=1)
        self.mainText.grid(row=0, column=0, columnspan=3, sticky="N")
        self.themeButton.grid(row=0, column=2, sticky="NE", padx=20, pady=20)
        self.fileFrame.grid(row=1, column=0, columnspan=3, sticky="N", ipadx=20, ipady=20)

    #theme change function
    def toggleTheme(self):
        current_mode = ctk.get_appearance_mode()
        if current_mode == 'Light':
            ctk.set_appearance_mode('Dark')
        else:
            ctk.set_appearance_mode('Light')
    

    #function to open file dialog
    def open_file_dialog(self):
        file_path = ctk.filedialog.askopenfilename(title="Select a File", initialdir="/", filetypes=[("All files", "*.*")])
        if file_path:
            self.file_path = file_path
            self.fileNameLabel.configure(text=f"Chosen file: {file_path}")
            self.scanButton.configure(state='normal')

    # Perorm the scan and generate result by calling the APIs and handle errors
    def start_scan(self):
        self.malwareInfoLabel.configure(text='') #Clear existing malware info before new scan.
        #Clear table and AI Response frames.
        for widget in self.tableFrame.winfo_children():
            widget.pack_forget()
        self.tableFrame.grid_forget()
        self.aiResponseFrame.grid_forget()
        #Generate report and AI Response.
        try: 
            self.tableFrame.grid(row=2,column=0)
            self.tableFrameTitle.pack()
            table=Table.createTable(window=self.tableFrame,filePath=self.file_path)
            stats=table.json()['data']['attributes']['last_analysis_stats']
            self.malwareInfoLabel.configure(text=f'malicious:{stats["malicious"]}\nsuspicious:{stats["suspicious"]}\nundetected:{stats["undetected"]}',font=('',15),text_color='red')
            self.malwareInfoLabel.pack()
            aiResponse=ai.askAI(table.text)
            self.aiResponseFrame.grid(row=2,column=2)
            self.aiResponseTitle.pack()
            self.aiResponseBox.pack()
            self.aiResponseBox.configure(state='normal')
            self.aiResponseBox.delete(index1="1.0",index2=ctk.END)
            self.aiResponseBox.insert(index="0.0",text=aiResponse)
            self.aiResponseBox.configure(state='disabled')
            
        except Exception as e:
            print(e)
            self.tableFrame.grid_forget()
            self.aiResponseFrame.grid_forget()
            try:
                requests.get('https://google.com')
                self.malwareInfoLabel.configure(text='No malware found',font=('',20),text_color='green')#Malware not found.
                self.malwareInfoLabel.pack()
            except: #Handle no internet.
                self.malwareInfoLabel.configure(text='Check Your Internet Connection And Try Again',font=('',20),text_color='red')
                self.malwareInfoLabel.pack()

    #Perform scan in a thread to prevent UI blocking.
    def handleScan(self):
        threading.Thread(target=self.start_scan).start()


if __name__ == "__main__":
    window = ctk.CTk()
    window.title('Malware Scanner')
    width = window.winfo_screenwidth()
    height = window.winfo_screenheight()
    window.geometry(f"{width}x{height}")
    app = MalwareScannerApp(window)
    window.mainloop()
