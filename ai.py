import google.generativeai as genai

#configure gemini API
genai.configure(api_key="/* Insert Your Gemini API Key*/")


#Google gemini API
generation_config = {
  "temperature": 1,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
  "response_mime_type": "text/plain",
}

#Gemini API safety settings with dangerous settings set to none since the context is about malware.
safety_settings = [
  {
    "category": "HARM_CATEGORY_HARASSMENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE",
  },
  {
    "category": "HARM_CATEGORY_HATE_SPEECH",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE",
  },
  {
    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE",
  },
  {
    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
    "threshold": "BLOCK_NONE",
  },
]


#Model creation with instruction.
model = genai.GenerativeModel(
  model_name="gemini-1.5-flash",
  safety_settings=safety_settings,
  generation_config=generation_config,
  system_instruction="DO NOT TALK ABOUT THE RESPONSE.\nonly talk about what this malware is, its name and how it will effect my computer.",
)


#Start chat session.
chat_session = model.start_chat()

#Function to take request and get AI response
def askAI(malwareInfo):
    try:
      response = chat_session.send_message(malwareInfo)
      return response.text
    except Exception as e:
       print(e)
       return e


